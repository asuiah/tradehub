[
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "getpass",
        "importPath": "getpass",
        "description": "getpass",
        "isExtraImport": true,
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "print_",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "__version__",
        "importPath": "peewee",
        "description": "peewee",
        "isExtraImport": true,
        "detail": "peewee",
        "documentation": {}
    },
    {
        "label": "CockroachDatabase",
        "importPath": "playhouse.cockroachdb",
        "description": "playhouse.cockroachdb",
        "isExtraImport": true,
        "detail": "playhouse.cockroachdb",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "playhouse.reflection",
        "description": "playhouse.reflection",
        "isExtraImport": true,
        "detail": "playhouse.reflection",
        "documentation": {}
    },
    {
        "label": "moomoo",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "moomoo",
        "description": "moomoo",
        "detail": "moomoo",
        "documentation": {}
    },
    {
        "label": "typing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "typing",
        "description": "typing",
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "RET_CODE",
        "importPath": "libs.broker.broker.constant",
        "description": "libs.broker.broker.constant",
        "isExtraImport": true,
        "detail": "libs.broker.broker.constant",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "MooMooBroker",
        "importPath": "broker",
        "description": "broker",
        "isExtraImport": true,
        "detail": "broker",
        "documentation": {}
    },
    {
        "label": "MooMooBroker",
        "importPath": "broker",
        "description": "broker",
        "isExtraImport": true,
        "detail": "broker",
        "documentation": {}
    },
    {
        "label": "TradeEnvEnum",
        "importPath": "broker.constant",
        "description": "broker.constant",
        "isExtraImport": true,
        "detail": "broker.constant",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "class BaseModel(Model):\n    class Meta:\n        database = database\n\"\"\"\nUNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass\n\"\"\"\nDATABASE_ALIASES = {\n    CockroachDatabase: ['cockroach', 'cockroachdb', 'crdb'],",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "UnknownField",
        "kind": 6,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "class UnknownField(object):\n    def __init__(self, *_, **__): pass\n\"\"\"\nDATABASE_ALIASES = {\n    CockroachDatabase: ['cockroach', 'cockroachdb', 'crdb'],\n    MySQLDatabase: ['mysql', 'mysqldb'],\n    PostgresqlDatabase: ['postgres', 'postgresql'],\n    SqliteDatabase: ['sqlite', 'sqlite3'],\n}\nDATABASE_MAP = dict((value, key)",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "make_introspector",
        "kind": 2,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "def make_introspector(database_type, database_name, **kwargs):\n    if database_type not in DATABASE_MAP:\n        err('Unrecognized database, must be one of: %s' %\n            ', '.join(DATABASE_MAP.keys()))\n        sys.exit(1)\n    schema = kwargs.pop('schema', None)\n    DatabaseClass = DATABASE_MAP[database_type]\n    db = DatabaseClass(database_name, **kwargs)\n    return Introspector.from_database(db, schema=schema)\ndef print_models(introspector, tables=None, preserve_order=False,",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "print_models",
        "kind": 2,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "def print_models(introspector, tables=None, preserve_order=False,\n                 include_views=False, ignore_unknown=False, snake_case=True):\n    database = introspector.introspect(table_names=tables,\n                                       include_views=include_views,\n                                       snake_case=snake_case)\n    db_kwargs = introspector.get_database_kwargs()\n    header = HEADER % (\n        introspector.get_additional_imports(),\n        introspector.get_database_class().__name__,\n        introspector.get_database_name(),",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "print_header",
        "kind": 2,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "def print_header(cmd_line, introspector):\n    timestamp = datetime.datetime.now()\n    print_('# Code generated by:')\n    print_('# python -m pwiz %s' % cmd_line)\n    print_('# Date: %s' % timestamp.strftime('%B %d, %Y %I:%M%p'))\n    print_('# Database: %s' % introspector.get_database_name())\n    print_('# Peewee version: %s' % peewee_version)\n    print_('')\ndef err(msg):\n    sys.stderr.write('\\033[91m%s\\033[0m\\n' % msg)",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "err",
        "kind": 2,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "def err(msg):\n    sys.stderr.write('\\033[91m%s\\033[0m\\n' % msg)\n    sys.stderr.flush()\ndef get_option_parser():\n    parser = OptionParser(usage='usage: %prog [options] database_name')\n    ao = parser.add_option\n    ao('-H', '--host', dest='host')\n    ao('-p', '--port', dest='port', type='int')\n    ao('-u', '--user', dest='user')\n    ao('-P', '--password', dest='password', action='store_true')",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "get_option_parser",
        "kind": 2,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "def get_option_parser():\n    parser = OptionParser(usage='usage: %prog [options] database_name')\n    ao = parser.add_option\n    ao('-H', '--host', dest='host')\n    ao('-p', '--port', dest='port', type='int')\n    ao('-u', '--user', dest='user')\n    ao('-P', '--password', dest='password', action='store_true')\n    engines = sorted(DATABASE_MAP)\n    ao('-e', '--engine', dest='engine', choices=engines,\n       help=('Database type, e.g. sqlite, mysql, postgresql or cockroachdb. '",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "get_connect_kwargs",
        "kind": 2,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "def get_connect_kwargs(options):\n    ops = ('host', 'port', 'user', 'schema')\n    kwargs = dict((o, getattr(options, o)) for o in ops if getattr(options, o))\n    if options.password:\n        kwargs['password'] = getpass()\n    return kwargs\nif __name__ == '__main__':\n    raw_argv = sys.argv\n    parser = get_option_parser()\n    options, args = parser.parse_args()",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "HEADER",
        "kind": 5,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "HEADER = \"\"\"from peewee import *%s\ndatabase = %s('%s'%s)\n\"\"\"\nBASE_MODEL = \"\"\"\\\nclass BaseModel(Model):\n    class Meta:\n        database = database\n\"\"\"\nUNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "database = %s('%s'%s)\n\"\"\"\nBASE_MODEL = \"\"\"\\\nclass BaseModel(Model):\n    class Meta:\n        database = database\n\"\"\"\nUNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "BASE_MODEL",
        "kind": 5,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "BASE_MODEL = \"\"\"\\\nclass BaseModel(Model):\n    class Meta:\n        database = database\n\"\"\"\nUNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass\n\"\"\"\nDATABASE_ALIASES = {",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "UNKNOWN_FIELD",
        "kind": 5,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "UNKNOWN_FIELD = \"\"\"\\\nclass UnknownField(object):\n    def __init__(self, *_, **__): pass\n\"\"\"\nDATABASE_ALIASES = {\n    CockroachDatabase: ['cockroach', 'cockroachdb', 'crdb'],\n    MySQLDatabase: ['mysql', 'mysqldb'],\n    PostgresqlDatabase: ['postgres', 'postgresql'],\n    SqliteDatabase: ['sqlite', 'sqlite3'],\n}",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "DATABASE_ALIASES",
        "kind": 5,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "DATABASE_ALIASES = {\n    CockroachDatabase: ['cockroach', 'cockroachdb', 'crdb'],\n    MySQLDatabase: ['mysql', 'mysqldb'],\n    PostgresqlDatabase: ['postgres', 'postgresql'],\n    SqliteDatabase: ['sqlite', 'sqlite3'],\n}\nDATABASE_MAP = dict((value, key)\n                    for key in DATABASE_ALIASES\n                    for value in DATABASE_ALIASES[key])\ndef make_introspector(database_type, database_name, **kwargs):",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "DATABASE_MAP",
        "kind": 5,
        "importPath": ".venv.bin.pwiz",
        "description": ".venv.bin.pwiz",
        "peekOfCode": "DATABASE_MAP = dict((value, key)\n                    for key in DATABASE_ALIASES\n                    for value in DATABASE_ALIASES[key])\ndef make_introspector(database_type, database_name, **kwargs):\n    if database_type not in DATABASE_MAP:\n        err('Unrecognized database, must be one of: %s' %\n            ', '.join(DATABASE_MAP.keys()))\n        sys.exit(1)\n    schema = kwargs.pop('schema', None)\n    DatabaseClass = DATABASE_MAP[database_type]",
        "detail": ".venv.bin.pwiz",
        "documentation": {}
    },
    {
        "label": "IBKRBroker",
        "kind": 6,
        "importPath": "libs.broker.broker.ibkr.internal",
        "description": "libs.broker.broker.ibkr.internal",
        "peekOfCode": "class IBKRBroker(BrokerStrategy):\n    pass",
        "detail": "libs.broker.broker.ibkr.internal",
        "documentation": {}
    },
    {
        "label": "FTModifyOrderConfig",
        "kind": 6,
        "importPath": "libs.broker.broker.moomoo.interface",
        "description": "libs.broker.broker.moomoo.interface",
        "peekOfCode": "class FTModifyOrderConfig(typing.TypedDict):\n    order_id: str\n    modify_order_op: ft.ModifyOrderOp\n    qty: int\n    price: float\n    adjust_limit: float\n    trd_env: ft.TrdEnv\n    # For condition order\n    acc_id: int\n    acc_index: int",
        "detail": "libs.broker.broker.moomoo.interface",
        "documentation": {}
    },
    {
        "label": "MooMooBroker",
        "kind": 6,
        "importPath": "libs.broker.broker.moomoo.internal",
        "description": "libs.broker.broker.moomoo.internal",
        "peekOfCode": "class MooMooBroker(BrokerStrategy):\n    def __init__(\n        self,\n        host: str,\n        port: int,\n        trd_env: str = TradeEnvEnum.PAPER,\n        trd_market: str = TradeMarketEnum.USStock,\n        trd_firm: str = ft.SecurityFirm.FUTUSG,\n    ) -> None:\n        self.__trd_env = (",
        "detail": "libs.broker.broker.moomoo.internal",
        "documentation": {}
    },
    {
        "label": "BrokerCtx",
        "kind": 6,
        "importPath": "libs.broker.broker.broker_ctx",
        "description": "libs.broker.broker.broker_ctx",
        "peekOfCode": "class BrokerCtx:\n    def __init__(\n        self,\n        broker: BrokerStrategy,\n    ) -> None:\n        self._broker = broker\n    def get_broker(self) -> BrokerStrategy:\n        return self._broker\n    def set_broker(self, broker: BrokerStrategy) -> None:\n        self._broker = broker",
        "detail": "libs.broker.broker.broker_ctx",
        "documentation": {}
    },
    {
        "label": "TradeEnum",
        "kind": 6,
        "importPath": "libs.broker.broker.constant",
        "description": "libs.broker.broker.constant",
        "peekOfCode": "class TradeEnum:\n    SELL = \"SELL\"\n    BUY = \"BUY\"\nclass OrderEnum:\n    STOCK = \"STOCK\"\n    OPTION = \"OPTION\"\nclass TradeEnvEnum:\n    PAPER = \"PAPER_TRADING\"\n    REAL = \"REAL\"\nclass TradeMarketEnum:",
        "detail": "libs.broker.broker.constant",
        "documentation": {}
    },
    {
        "label": "OrderEnum",
        "kind": 6,
        "importPath": "libs.broker.broker.constant",
        "description": "libs.broker.broker.constant",
        "peekOfCode": "class OrderEnum:\n    STOCK = \"STOCK\"\n    OPTION = \"OPTION\"\nclass TradeEnvEnum:\n    PAPER = \"PAPER_TRADING\"\n    REAL = \"REAL\"\nclass TradeMarketEnum:\n    USStock = \"US_STOCK\"\n    HKStocks = \"HK_STOCK\"\nclass HttpErrorCode:",
        "detail": "libs.broker.broker.constant",
        "documentation": {}
    },
    {
        "label": "TradeEnvEnum",
        "kind": 6,
        "importPath": "libs.broker.broker.constant",
        "description": "libs.broker.broker.constant",
        "peekOfCode": "class TradeEnvEnum:\n    PAPER = \"PAPER_TRADING\"\n    REAL = \"REAL\"\nclass TradeMarketEnum:\n    USStock = \"US_STOCK\"\n    HKStocks = \"HK_STOCK\"\nclass HttpErrorCode:\n    SUCCESS = 200\n    BAD_REQUEST = 400\n    FORBIDDEN = 403",
        "detail": "libs.broker.broker.constant",
        "documentation": {}
    },
    {
        "label": "TradeMarketEnum",
        "kind": 6,
        "importPath": "libs.broker.broker.constant",
        "description": "libs.broker.broker.constant",
        "peekOfCode": "class TradeMarketEnum:\n    USStock = \"US_STOCK\"\n    HKStocks = \"HK_STOCK\"\nclass HttpErrorCode:\n    SUCCESS = 200\n    BAD_REQUEST = 400\n    FORBIDDEN = 403\n    INTERNAL_ERROR = 500\nclass RET_CODE:\n    RET_OK = 0",
        "detail": "libs.broker.broker.constant",
        "documentation": {}
    },
    {
        "label": "HttpErrorCode",
        "kind": 6,
        "importPath": "libs.broker.broker.constant",
        "description": "libs.broker.broker.constant",
        "peekOfCode": "class HttpErrorCode:\n    SUCCESS = 200\n    BAD_REQUEST = 400\n    FORBIDDEN = 403\n    INTERNAL_ERROR = 500\nclass RET_CODE:\n    RET_OK = 0\n    RET_ERROR = -1",
        "detail": "libs.broker.broker.constant",
        "documentation": {}
    },
    {
        "label": "RET_CODE",
        "kind": 6,
        "importPath": "libs.broker.broker.constant",
        "description": "libs.broker.broker.constant",
        "peekOfCode": "class RET_CODE:\n    RET_OK = 0\n    RET_ERROR = -1",
        "detail": "libs.broker.broker.constant",
        "documentation": {}
    },
    {
        "label": "BrokerResponseBase",
        "kind": 6,
        "importPath": "libs.broker.broker.interface",
        "description": "libs.broker.broker.interface",
        "peekOfCode": "class BrokerResponseBase(typing.TypedDict):\n    code: int\nclass BrokerSuccessResponse(BrokerResponseBase):\n    data: object\nclass BrokerErrorResponse(BrokerResponseBase):\n    errors: object\nRetCode: typing.TypeAlias = int\nErrorMessage: typing.TypeAlias = str\nRetData: typing.TypeAlias = tuple[RetCode, pd.DataFrame | ErrorMessage]\nclass BrokerStrategy(ABC):",
        "detail": "libs.broker.broker.interface",
        "documentation": {}
    },
    {
        "label": "BrokerSuccessResponse",
        "kind": 6,
        "importPath": "libs.broker.broker.interface",
        "description": "libs.broker.broker.interface",
        "peekOfCode": "class BrokerSuccessResponse(BrokerResponseBase):\n    data: object\nclass BrokerErrorResponse(BrokerResponseBase):\n    errors: object\nRetCode: typing.TypeAlias = int\nErrorMessage: typing.TypeAlias = str\nRetData: typing.TypeAlias = tuple[RetCode, pd.DataFrame | ErrorMessage]\nclass BrokerStrategy(ABC):\n    @abstractmethod\n    def close(self) -> RetData:",
        "detail": "libs.broker.broker.interface",
        "documentation": {}
    },
    {
        "label": "BrokerErrorResponse",
        "kind": 6,
        "importPath": "libs.broker.broker.interface",
        "description": "libs.broker.broker.interface",
        "peekOfCode": "class BrokerErrorResponse(BrokerResponseBase):\n    errors: object\nRetCode: typing.TypeAlias = int\nErrorMessage: typing.TypeAlias = str\nRetData: typing.TypeAlias = tuple[RetCode, pd.DataFrame | ErrorMessage]\nclass BrokerStrategy(ABC):\n    @abstractmethod\n    def close(self) -> RetData:\n        \"\"\"关闭Broker\"\"\"\n        pass",
        "detail": "libs.broker.broker.interface",
        "documentation": {}
    },
    {
        "label": "BrokerStrategy",
        "kind": 6,
        "importPath": "libs.broker.broker.interface",
        "description": "libs.broker.broker.interface",
        "peekOfCode": "class BrokerStrategy(ABC):\n    @abstractmethod\n    def close(self) -> RetData:\n        \"\"\"关闭Broker\"\"\"\n        pass\n    @abstractmethod\n    def get_account_info(self) -> RetData:\n        \"\"\"获取当前账户信息\"\"\"\n        pass\n    @abstractmethod",
        "detail": "libs.broker.broker.interface",
        "documentation": {}
    },
    {
        "label": "IBKRBroker",
        "kind": 6,
        "importPath": "libs.broker.build.lib.broker.ibkr.internal",
        "description": "libs.broker.build.lib.broker.ibkr.internal",
        "peekOfCode": "class IBKRBroker(BrokerStrategy):\n    pass",
        "detail": "libs.broker.build.lib.broker.ibkr.internal",
        "documentation": {}
    },
    {
        "label": "FTModifyOrderConfig",
        "kind": 6,
        "importPath": "libs.broker.build.lib.broker.moomoo.interface",
        "description": "libs.broker.build.lib.broker.moomoo.interface",
        "peekOfCode": "class FTModifyOrderConfig(typing.TypedDict):\n    order_id: str\n    modify_order_op: ft.ModifyOrderOp\n    qty: int\n    price: float\n    adjust_limit: float\n    trd_env: ft.TrdEnv\n    # For condition order\n    acc_id: int\n    acc_index: int",
        "detail": "libs.broker.build.lib.broker.moomoo.interface",
        "documentation": {}
    },
    {
        "label": "MooMooBroker",
        "kind": 6,
        "importPath": "libs.broker.build.lib.broker.moomoo.internal",
        "description": "libs.broker.build.lib.broker.moomoo.internal",
        "peekOfCode": "class MooMooBroker(BrokerStrategy):\n    def __init__(\n        self,\n        host: str,\n        port: int,\n        trd_env: str = TradeEnvEnum.PAPER,\n        trd_market: str = TradeMarketEnum.USStock,\n        trd_firm=ft.SecurityFirm.FUTUSG,\n    ) -> None:\n        self.__trd_env = (",
        "detail": "libs.broker.build.lib.broker.moomoo.internal",
        "documentation": {}
    },
    {
        "label": "BrokerCtx",
        "kind": 6,
        "importPath": "libs.broker.build.lib.broker.broker_ctx",
        "description": "libs.broker.build.lib.broker.broker_ctx",
        "peekOfCode": "class BrokerCtx:\n    def __init__(\n        self,\n        broker: BrokerStrategy,\n    ) -> None:\n        self._broker = broker\n    def get_broker(self):\n        return self._broker\n    def set_broker(self, broker: BrokerStrategy):\n        self._broker = broker",
        "detail": "libs.broker.build.lib.broker.broker_ctx",
        "documentation": {}
    },
    {
        "label": "TradeEnum",
        "kind": 6,
        "importPath": "libs.broker.build.lib.broker.constant",
        "description": "libs.broker.build.lib.broker.constant",
        "peekOfCode": "class TradeEnum:\n    SELL = \"SELL\"\n    BUY = \"BUY\"\nclass OrderEnum:\n    STOCK = \"STOCK\"\n    OPTION = \"OPTION\"\nclass TradeEnvEnum:\n    PAPER = \"PAPER_TRADING\"\n    REAL = \"REAL\"\nclass TradeMarketEnum:",
        "detail": "libs.broker.build.lib.broker.constant",
        "documentation": {}
    },
    {
        "label": "OrderEnum",
        "kind": 6,
        "importPath": "libs.broker.build.lib.broker.constant",
        "description": "libs.broker.build.lib.broker.constant",
        "peekOfCode": "class OrderEnum:\n    STOCK = \"STOCK\"\n    OPTION = \"OPTION\"\nclass TradeEnvEnum:\n    PAPER = \"PAPER_TRADING\"\n    REAL = \"REAL\"\nclass TradeMarketEnum:\n    USStock = \"US_STOCK\"\n    HKStocks = \"HK_STOCK\"\nclass HttpErrorCode:",
        "detail": "libs.broker.build.lib.broker.constant",
        "documentation": {}
    },
    {
        "label": "TradeEnvEnum",
        "kind": 6,
        "importPath": "libs.broker.build.lib.broker.constant",
        "description": "libs.broker.build.lib.broker.constant",
        "peekOfCode": "class TradeEnvEnum:\n    PAPER = \"PAPER_TRADING\"\n    REAL = \"REAL\"\nclass TradeMarketEnum:\n    USStock = \"US_STOCK\"\n    HKStocks = \"HK_STOCK\"\nclass HttpErrorCode:\n    SUCCESS = 200\n    BAD_REQUEST = 400\n    FORBIDDEN = 403",
        "detail": "libs.broker.build.lib.broker.constant",
        "documentation": {}
    },
    {
        "label": "TradeMarketEnum",
        "kind": 6,
        "importPath": "libs.broker.build.lib.broker.constant",
        "description": "libs.broker.build.lib.broker.constant",
        "peekOfCode": "class TradeMarketEnum:\n    USStock = \"US_STOCK\"\n    HKStocks = \"HK_STOCK\"\nclass HttpErrorCode:\n    SUCCESS = 200\n    BAD_REQUEST = 400\n    FORBIDDEN = 403\n    INTERNAL_ERROR = 500",
        "detail": "libs.broker.build.lib.broker.constant",
        "documentation": {}
    },
    {
        "label": "HttpErrorCode",
        "kind": 6,
        "importPath": "libs.broker.build.lib.broker.constant",
        "description": "libs.broker.build.lib.broker.constant",
        "peekOfCode": "class HttpErrorCode:\n    SUCCESS = 200\n    BAD_REQUEST = 400\n    FORBIDDEN = 403\n    INTERNAL_ERROR = 500",
        "detail": "libs.broker.build.lib.broker.constant",
        "documentation": {}
    },
    {
        "label": "BrokerResponseBase",
        "kind": 6,
        "importPath": "libs.broker.build.lib.broker.interface",
        "description": "libs.broker.build.lib.broker.interface",
        "peekOfCode": "class BrokerResponseBase(typing.TypedDict):\n    code: int\nclass BrokerSuccessResponse(BrokerResponseBase):\n    data: object\nclass BrokerErrorResponse(BrokerResponseBase):\n    errors: object\nclass BrokerStrategy(ABC):\n    @abstractmethod\n    def close(self) -> None:\n        \"\"\"关闭Broker\"\"\"",
        "detail": "libs.broker.build.lib.broker.interface",
        "documentation": {}
    },
    {
        "label": "BrokerSuccessResponse",
        "kind": 6,
        "importPath": "libs.broker.build.lib.broker.interface",
        "description": "libs.broker.build.lib.broker.interface",
        "peekOfCode": "class BrokerSuccessResponse(BrokerResponseBase):\n    data: object\nclass BrokerErrorResponse(BrokerResponseBase):\n    errors: object\nclass BrokerStrategy(ABC):\n    @abstractmethod\n    def close(self) -> None:\n        \"\"\"关闭Broker\"\"\"\n        pass\n    @abstractmethod",
        "detail": "libs.broker.build.lib.broker.interface",
        "documentation": {}
    },
    {
        "label": "BrokerErrorResponse",
        "kind": 6,
        "importPath": "libs.broker.build.lib.broker.interface",
        "description": "libs.broker.build.lib.broker.interface",
        "peekOfCode": "class BrokerErrorResponse(BrokerResponseBase):\n    errors: object\nclass BrokerStrategy(ABC):\n    @abstractmethod\n    def close(self) -> None:\n        \"\"\"关闭Broker\"\"\"\n        pass\n    @abstractmethod\n    def get_account_info(self)-> None:\n        \"\"\"获取当前账户信息\"\"\"",
        "detail": "libs.broker.build.lib.broker.interface",
        "documentation": {}
    },
    {
        "label": "BrokerStrategy",
        "kind": 6,
        "importPath": "libs.broker.build.lib.broker.interface",
        "description": "libs.broker.build.lib.broker.interface",
        "peekOfCode": "class BrokerStrategy(ABC):\n    @abstractmethod\n    def close(self) -> None:\n        \"\"\"关闭Broker\"\"\"\n        pass\n    @abstractmethod\n    def get_account_info(self)-> None:\n        \"\"\"获取当前账户信息\"\"\"\n        pass\n    @abstractmethod",
        "detail": "libs.broker.build.lib.broker.interface",
        "documentation": {}
    },
    {
        "label": "get_broker",
        "kind": 2,
        "importPath": "tests.moomoo_broker.moomoo_ctx",
        "description": "tests.moomoo_broker.moomoo_ctx",
        "peekOfCode": "def get_broker()->MooMooBroker:\n    return MooMooBroker(\n        host=\"127.0.0.1\",\n        port=6066,\n        trd_env=TradeEnvEnum.PAPER,\n    )",
        "detail": "tests.moomoo_broker.moomoo_ctx",
        "documentation": {}
    },
    {
        "label": "broker",
        "kind": 2,
        "importPath": "tests.moomoo_broker.test_moomoo_trade",
        "description": "tests.moomoo_broker.test_moomoo_trade",
        "peekOfCode": "def broker()->MooMooBroker:\n    return get_broker()\n# def test_moomoo_buy_stock(broker)->None:\n#     code, order_data = broker.buy_stock(code=\"US.SOUN\", buy_price=2, qty=20)\n#     assert code == ft.RET_OK\n#     code, order_data_list = broker.get_order_list()\n#     assert  order_data[\"order_id\"].isin(order_data_list[\"order_id\"].values).bool()",
        "detail": "tests.moomoo_broker.test_moomoo_trade",
        "documentation": {}
    }
]